/* Exercício 1 : Utilize uma combinação das expressões aritméticas e
adicione um campo chamado idade à coleção clientes  */
db.clientes.aggregate([
  { 
    $addFields: {
      idade: {
        $round: [
          {
            $divide: [
              {
                $subtract: [new Date(), "$dataNascimento"] },
                86400000 * 365],
      }, 0] }
    },
  },
]);

/* Exercício 2 : Utilizando o novo campo idade , conte quantos clientes
têm entre 18 e 25 anos. */
db.clientes.aggregate([
  { 
    $addFields: {
      idade: {
        $round: [
          {
            $divide: [
              {
                $subtract: [new Date(), "$dataNascimento"] },
                86400000 * 365],
      }, 0] }
    },
  },
  {
    $match: { idade: { $gte: 18, $lte: 25 } }
  },
  {
    $count: "totalClientes"
  }
]);

/* Exercício 3 : Remova os estágios $count e $match do exercício anterior
e adicione um estágio no pipeline que coloque as compras do cliente no
campo compras */
db.clientes.aggregate([
  { 
    $addFields: {
      idade: {
        $round: [
          {
            $divide: [
              {
                $subtract: [new Date(), "$dataNascimento"] },
                86400000 * 365],
      }, 0] }
    },
  },
  {
    $lookup: {
      from: 'vendas',
      let: { cliente_id: "$clienteId" },
      pipeline: [{ $match: { $expr: { $eq: ["$clienteId", "$$cliente_id"] } } }],
      as: 'compras'
    }
  }
]);

/* 4- Exercício 4 : Selecione TODOS os clientes que compraram entre Junho
de 2019 e Março de 2020 */
db.clientes.aggregate([
  { 
    $addFields: {
      idade: {
        $round: [
          {
            $divide: [
              {
                $subtract: [new Date(), "$dataNascimento"] },
                86400000 * 365],
      }, 0] }
    },
  },
  {
    $lookup: {
      from: 'vendas',
      let: { cliente_id: "$clienteId" },
      pipeline: [{ $match: { $expr: { $eq: ["$clienteId", "$$cliente_id"] } } }],
      as: 'compras'
    }
  },
  {
    $match: {
      "compras.dataVenda": {
        $gte: ISODate("2019-06-01"),
        $lte: ISODate("2020-04-01"),
      },
    },
  },
]);

/* Exercício 5 : Confira o número de documentos retornados pelo pipeline
com o método itcount() . Até aqui, você deve ter 486 documentos sendo
retornados. */
db.clientes.aggregate([
  { 
    $addFields: {
      idade: {
        $round: [
          {
            $divide: [
              {
                $subtract: [new Date(), "$dataNascimento"] },
                86400000 * 365],
      }, 0] }
    },
  },
  {
    $lookup: {
      from: 'vendas',
      let: { cliente_id: "$clienteId" },
      pipeline: [{ $match: { $expr: { $eq: ["$clienteId", "$$cliente_id"] } } }],
      as: 'compras'
    }
  },
  {
    $match: {
      "compras.dataVenda": {
        $gte: ISODate("2019-06-01"),
        $lte: ISODate("2020-04-01"),
      },
    },
  },
]).itcount();

/* Exercício 6 : Ainda nesse pipeline , descubra os 5 estados com mais
compras. */
db.clientes.aggregate([
  { 
    $addFields: {
      idade: {
        $round: [
          {
            $divide: [
              {
                $subtract: [new Date(), "$dataNascimento"] },
                86400000 * 365],
      }, 0] }
    },
  },
  {
    $lookup: {
      from: 'vendas',
      let: { cliente_id: "$clienteId" },
      pipeline: [{ $match: { $expr: { $eq: ["$clienteId", "$$cliente_id"] } } }],
      as: 'compras'
    }
  },
  {
    $match: {
      "compras.dataVenda": {
        $gte: ISODate("2019-06-01"),
        $lte: ISODate("2020-04-01"),
      },
    },
  },
  { 
    $addFields: { totalCompras: { $size: "$compras" } },
  },
  {
    $sort: { totalCompras: -1 },
  },
  {
    $limit: 5
  },
]);

/* Exercício 7 : Descubra o cliente que mais consumiu QUEIJO PRATO.
Retorne um documento com a seguinte estrutura:
{
  "nomeCliente": "NOME",
  "uf": "UF DO CLIENTE",
  "totalConsumido": 100
}
*/
db.vendas.aggregate([
  {
    $match: { "itens.nome": "QUEIJO PRATO" },
  },
  { $unwind: "$itens" },
  { $match: { "itens.nome": "QUEIJO PRATO" } },
  { $group: { _id: "$clienteId", totalConsumido: { $sum: "$itens.quantidade" } } },
  { $sort: { totalConsumido: -1 } },
  { $limit: 1 },
  { 
    $lookup: {
      from: 'clientes',
      localField: '_id',
      foreignField: 'clienteId',
      as: 'cliente'
    }
  },
  { $unwind: "$cliente" },
  { 
    $project: {
      nomeCliente: "$cliente.nome",
      uf: "$cliente.endereco.uf",
      totalConsumido: "$totalConsumido",
      _id: 0,
    }
  }
]);

db.vendas.find();
db.clientes.find();
