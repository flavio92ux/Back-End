/* No exemplo abaixo, o método db.colecao.updateOne() é utilizado para alterar o
primeiro documento na coleção inventory em que o campo item seja igual a "paper" : */
db.inventory.updateOne(
  { item: "paper" },
  { $set: { "size.uom": "cm", status: "P" } }
);

db.inventory.find();

/* No exemplo abaixo, o método db.colecao.updateMany() é utilizado para alterar
todos os documentos da coleção inventory em que o valor do campo qty seja menor do que 50  */
db.inventory.updateMany(
  { "qty": { $lt: 50 } },
  { $set: { "size.uom": "in", status: "P" } }
);

/* Exemplo 1: Alterando campos no primeiro nível (top-level)
Para o documento que corresponder ao critério de filtro em que o campo _id
seja igual a 100 , a operação a seguir altera o valor dos campos quantity,
details e tags : */

db.products.update(
  { _id: 100 },
  { $set: {
      quantity: 500,
      details: { model: "14Q3", make: "xyz" },
      tags: [ "coats", "outerwear", "clothing" ]
    }
  }
);

/* Exemplo 2: Alterando campos em documentos embedados
Para alterar campos dentro de subdocumentos, você deve 
utilizar o mesmo conceito de dot notation visto durante as operações de find() .
A operação abaixo altera o valor do campo make dentro do subdocumento details em 
que o campo _id seja igual a 100 : */
db.products.update(
  { _id: 100 },
  { $set: { "details.make": "zzz" } }
);

/* Exemplo 3: Alterando valores em arrays
Como visto, arrays são uma estrutura muito importante na modelagem de dados do MongoDB,
e em algum momento você precisará fazer updates nessas estruturas.
A query abaixo tem como critério de seleção o campo _id igual a 100.
Ela altera o segundo elemento (índice 1 ) do array tags e o campo rating no
primeiro elemento (índice 0 ) do array ratings :
 */
 db.products.update(
  { _id: 100 },
  { $set: {
      "tags.1": "rain gear",
      "ratings.0.rating": 2
    }
  }
);

db.products.insertOne(
  { "_id": 1, "item": "ABC", "price": NumberDecimal("10.99"), "qty": 25 }
);

db.products.update(
  { _id: 1 },
  { $mul: { price: NumberDecimal("1.25"), qty: 2 } }
);

db.products.insertOne(
  { _id: 2, item: "Unknown" }
);

db.products.update(
  { _id: 2 },
  { $mul: { price: NumberLong("100") } }
);

db.products.insertOne(
  { _id: 3,  item: "XYZ", price: NumberLong("10") }
);

db.products.update(
  { _id: 3 },
  { $mul: { price: NumberInt(5) } }
);

db.increment.insertOne(
  {
    _id: 1,
    sku: "abc123",
    quantity: 10,
    metrics: {
      orders: 2,
      ratings: 3.5
    }
  }
);

db.increment.update(
  { sku: "abc123" },
  { $inc: { quantity: -2, "metrics.orders": 1 } }
);

db.increment.find();

db.tags.insertOne(
  {
    _id: 1,
    desc: "crafts",
    dateEntered: ISODate("2019-10-01T05:00:00Z"),
    dateExpired: ISODate("2019-10-01T16:38:16Z")
  }
);

db.tags.update(
  { _id: 1 },
  {
    $min: { dateEntered: new Date("2019-09-25") },
    $max: { dateExpired: new Date("2019-10-02") }
  }
);

db.customers.insertOne(
  { _id: 1, status: "a", lastModified: ISODate("2013-10-02T01:11:18.965Z") }
);

db.customers.updateOne(
  { _id: 1 },
  { $currentDate: {
      lastModified: true,
      "cancellation.date": { $type: "timestamp" }
    }, $set: {
      "cancellation.reason": "user request",
      status: "D"
    }
  }
);


db.fruits.insertOne(
  { _id: 100, name: "Banana", quantity: 100, inStock: true }
);

db.fruits.updateOne(
  { name: "Banana" },
  { $rename: {
      "name": "productName"
    }
  }
);

db.fruits.updateMany(
  { productName: "Banana" },
  { $unset: { quantity: "" } }
);

db.fruits.find();



